// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "WBTech_Level0/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrdersDB is a mock of OrdersDB interface.
type MockOrdersDB struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersDBMockRecorder
}

// MockOrdersDBMockRecorder is the mock recorder for MockOrdersDB.
type MockOrdersDBMockRecorder struct {
	mock *MockOrdersDB
}

// NewMockOrdersDB creates a new mock instance.
func NewMockOrdersDB(ctrl *gomock.Controller) *MockOrdersDB {
	mock := &MockOrdersDB{ctrl: ctrl}
	mock.recorder = &MockOrdersDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersDB) EXPECT() *MockOrdersDBMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrdersDB) CreateOrder(order models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrdersDBMockRecorder) CreateOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrdersDB)(nil).CreateOrder), order)
}

// GetOrderById mocks base method.
func (m *MockOrdersDB) GetOrderById(uid string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", uid)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockOrdersDBMockRecorder) GetOrderById(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockOrdersDB)(nil).GetOrderById), uid)
}

// MockOrderCache is a mock of OrderCache interface.
type MockOrderCache struct {
	ctrl     *gomock.Controller
	recorder *MockOrderCacheMockRecorder
}

// MockOrderCacheMockRecorder is the mock recorder for MockOrderCache.
type MockOrderCacheMockRecorder struct {
	mock *MockOrderCache
}

// NewMockOrderCache creates a new mock instance.
func NewMockOrderCache(ctrl *gomock.Controller) *MockOrderCache {
	mock := &MockOrderCache{ctrl: ctrl}
	mock.recorder = &MockOrderCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderCache) EXPECT() *MockOrderCacheMockRecorder {
	return m.recorder
}

// GetAllOrders mocks base method.
func (m *MockOrderCache) GetAllOrders() ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders")
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrderCacheMockRecorder) GetAllOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrderCache)(nil).GetAllOrders))
}

// GetOrder mocks base method.
func (m *MockOrderCache) GetOrder(uid string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", uid)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderCacheMockRecorder) GetOrder(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderCache)(nil).GetOrder), uid)
}

// PutOrder mocks base method.
func (m *MockOrderCache) PutOrder(order models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutOrder indicates an expected call of PutOrder.
func (mr *MockOrderCacheMockRecorder) PutOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOrder", reflect.TypeOf((*MockOrderCache)(nil).PutOrder), order)
}
